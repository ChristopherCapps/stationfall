

	.FUNCT	PICK-ONE,TBL,LENGTH,CNT,RND,MSG,RFROB
	GET	TBL,0 >LENGTH
	GET	TBL,1 >CNT
	DEC	'LENGTH
	ADD	TBL,2 >TBL
	MUL	CNT,2
	ADD	TBL,STACK >RFROB
	SUB	LENGTH,CNT
	RANDOM	STACK >RND
	GET	RFROB,RND >MSG
	GET	RFROB,1
	PUT	RFROB,RND,STACK
	PUT	RFROB,1,MSG
	INC	'CNT
	EQUAL?	CNT,LENGTH \?CND1
	SET	'CNT,0
?CND1:	PUT	TBL,0,CNT
	RETURN	MSG


	.FUNCT	APRINT,OBJ
	FSET?	OBJ,NARTICLEBIT \?ELS3
	PRINTC	32
	JUMP	?CND1
?ELS3:	FSET?	OBJ,VOWELBIT \?ELS5
	PRINTI	" an "
	JUMP	?CND1
?ELS5:	PRINTI	" a "
?CND1:	PRINTD	OBJ
	RTRUE	


	.FUNCT	TPRINT,OBJ
	FSET?	OBJ,NARTICLEBIT \?ELS3
	PRINTC	32
	JUMP	?CND1
?ELS3:	PRINTI	" the "
?CND1:	PRINTD	OBJ
	RTRUE	


	.FUNCT	TPRINT-PRSO
	CALL	TPRINT,PRSO
	RSTACK	


	.FUNCT	TPRINT-PRSI
	CALL	TPRINT,PRSI
	RSTACK	


	.FUNCT	ARPRINT,OBJ
	CALL	APRINT,OBJ
	PRINT	PERIOD-CR
	RTRUE	


	.FUNCT	TRPRINT,OBJ
	CALL	TPRINT,OBJ
	PRINT	PERIOD-CR
	RTRUE	


	.FUNCT	GO
START::

?FCN:	SET	'WINNER,PROTAGONIST
	SET	'HERE,DECK-FIVE
	RANDOM	1220
	ADD	4430,STACK >INTERNAL-MOVES
	SET	'MOVES,INTERNAL-MOVES
	SUB	8100,INTERNAL-MOVES
	CALL	QUEUE,I-SLEEP-WARNINGS,STACK
	CALL	QUEUE,I-HUNGER-WARNINGS,1330
	PRINTI	"It's been five years since your planetfall on Resida. Your heroics in saving that doomed world resulted in a big promotion, but your life of dull scrubwork has been replaced by a life of dull paperwork. Today you find yourself amidst the administrative maze of Deck Five on a typically exciting task: an emergency mission to Space Station Gamma Delta Gamma 777-G 59/59 Sector Alpha-Mu-79 to pick up a supply of "
	PRINT	FORM-NAME
	PRINT	ELLIPSIS
	CALL	V-VERSION
	USL	
	CRLF	
	CALL	V-LOOK
	CALL	MAIN-LOOP
	JUMP	?FCN


	.FUNCT	MAIN-LOOP,TRASH
?PRG1:	CALL	MAIN-LOOP-1 >TRASH
	JUMP	?PRG1


	.FUNCT	MAIN-LOOP-1,ICNT,OCNT,NUM,CNT,OBJ,TBL,V,PTBL,OBJ1,TMP,?TMP1
	SET	'CNT,0
	SET	'OBJ,FALSE-VALUE
	SET	'PTBL,TRUE-VALUE
	CALL	PARSER >P-WON
	ZERO?	P-WON /?ELS3
	GET	P-PRSI,P-MATCHLEN >ICNT
	GET	P-PRSO,P-MATCHLEN >OCNT
	EQUAL?	PRSA,V?WALK /?CND4
	ZERO?	P-IT-OBJECT /?CND4
	CALL	ACCESSIBLE?,P-IT-OBJECT
	ZERO?	STACK /?CND4
	SET	'TMP,FALSE-VALUE
?PRG9:	IGRTR?	'CNT,ICNT /?REP10
	GET	P-PRSI,CNT
	EQUAL?	STACK,IT \?PRG9
	PUT	P-PRSI,CNT,P-IT-OBJECT
	SET	'TMP,TRUE-VALUE
?REP10:	ZERO?	TMP \?CND19
	SET	'CNT,0
?PRG22:	IGRTR?	'CNT,OCNT /?CND19
	GET	P-PRSO,CNT
	EQUAL?	STACK,IT \?PRG22
	PUT	P-PRSO,CNT,P-IT-OBJECT
?CND19:	SET	'CNT,0
?CND4:	ZERO?	OCNT \?ELS36
	PUSH	OCNT
	JUMP	?CND32
?ELS36:	GRTR?	OCNT,1 \?ELS38
	SET	'TBL,P-PRSO
	ZERO?	ICNT \?ELS41
	SET	'OBJ,FALSE-VALUE
	JUMP	?CND39
?ELS41:	GET	P-PRSI,1 >OBJ
?CND39:	PUSH	OCNT
	JUMP	?CND32
?ELS38:	GRTR?	ICNT,1 \?ELS45
	SET	'PTBL,FALSE-VALUE
	SET	'TBL,P-PRSI
	GET	P-PRSO,1 >OBJ
	PUSH	ICNT
	JUMP	?CND32
?ELS45:	PUSH	1
?CND32:	SET	'NUM,STACK
	ZERO?	OBJ \?CND48
	EQUAL?	ICNT,1 \?CND48
	GET	P-PRSI,1 >OBJ
?CND48:	EQUAL?	PRSA,V?WALK \?ELS55
	CALL	PERFORM-PRSA,PRSO >V
	JUMP	?CND53
?ELS55:	ZERO?	NUM \?ELS57
	GETB	P-SYNTAX,P-SBITS
	BAND	STACK,P-SONUMS
	ZERO?	STACK \?ELS60
	CALL	PERFORM-PRSA >V
	SET	'PRSO,FALSE-VALUE
	JUMP	?CND53
?ELS60:	ZERO?	LIT \?ELS62
	PRINT	TOO-DARK
	CRLF	
	CALL	STOP
	JUMP	?CND53
?ELS62:	PRINTI	"There isn't anything to "
	GET	P-ITBL,P-VERBN >TMP
	EQUAL?	PRSA,V?TELL \?ELS67
	PRINTI	"talk to"
	JUMP	?CND65
?ELS67:	ZERO?	P-OFLAG \?THN70
	ZERO?	P-MERGED /?ELS69
?THN70:	GET	TMP,0
	PRINTB	STACK
	JUMP	?CND65
?ELS69:	GETB	TMP,2 >?TMP1
	GETB	TMP,3
	CALL	WORD-PRINT,?TMP1,STACK
?CND65:	PRINTC	33
	CRLF	
	SET	'V,FALSE-VALUE
	CALL	STOP
	JUMP	?CND53
?ELS57:	SET	'P-NOT-HERE,0
	SET	'P-MULT,FALSE-VALUE
	GRTR?	NUM,1 \?CND76
	SET	'P-MULT,TRUE-VALUE
?CND76:	SET	'TMP,FALSE-VALUE
?PRG79:	IGRTR?	'CNT,NUM \?ELS83
	GRTR?	P-NOT-HERE,0 \?ELS86
	PRINTI	"[The "
	EQUAL?	P-NOT-HERE,NUM /?CND87
	PRINTI	"other "
?CND87:	PRINTI	"object"
	EQUAL?	P-NOT-HERE,1 /?CND90
	PRINTC	115
?CND90:	PRINTI	" that you mentioned "
	EQUAL?	P-NOT-HERE,1 /?ELS95
	PRINTI	"are"
	JUMP	?CND93
?ELS95:	PRINTI	"is"
?CND93:	PRINTI	"n't here.]"
	CRLF	
	JUMP	?CND53
?ELS86:	ZERO?	TMP \?CND53
	CALL	REFERRING
	JUMP	?CND53
?ELS83:	ZERO?	PTBL /?ELS104
	GET	P-PRSO,CNT >OBJ1
	JUMP	?CND102
?ELS104:	GET	P-PRSI,CNT >OBJ1
?CND102:	ZERO?	PTBL /?ELS112
	PUSH	OBJ1
	JUMP	?CND108
?ELS112:	PUSH	OBJ
?CND108:	SET	'PRSO,STACK
	ZERO?	PTBL /?ELS120
	PUSH	OBJ
	JUMP	?CND116
?ELS120:	PUSH	OBJ1
?CND116:	SET	'PRSI,STACK
	GRTR?	NUM,1 /?THN127
	GET	P-ITBL,P-NC1
	GET	STACK,0
	EQUAL?	STACK,W?ALL,W?BOTH,W?EVERYT \?CND124
?THN127:	CALL	DONT-ALL,OBJ1
	ZERO?	STACK \?PRG79
	EQUAL?	OBJ1,IT \?ELS136
	PRINTD	P-IT-OBJECT
	JUMP	?CND134
?ELS136:	EQUAL?	OBJ1,HIM \?ELS138
	PRINTD	P-HIM-OBJECT
	JUMP	?CND134
?ELS138:	PRINTD	OBJ1
?CND134:	PRINTI	": "
?CND124:	SET	'TMP,TRUE-VALUE
	CALL	PERFORM-PRSA,PRSO,PRSI >V
	EQUAL?	V,M-FATAL \?PRG79
?CND53:	EQUAL?	V,M-FATAL \?CND144
	SET	'P-CONT,FALSE-VALUE
?CND144:	CALL	CLOCKER-VERB?
	ZERO?	STACK /?ELS149
	EQUAL?	PRSA,V?TELL /?ELS149
	ZERO?	P-WON /?ELS149
	CALL	RUNNING?,I-SPACETRUCK
	ZERO?	STACK /?ELS154
	LESS?	SPACETRUCK-COUNTER,5 \?ELS154
	SET	'C-ELAPSED,240
	JUMP	?CND152
?ELS154:	CALL	QUEUED?,I-TIMER
	ZERO?	STACK /?CND152
	SET	'C-ELAPSED,10
?CND152:	GETP	HERE,P?ACTION
	CALL	STACK,M-END >V
	JUMP	?CND1
?ELS149:	SET	'C-ELAPSED,0
	JUMP	?CND1
?ELS3:	SET	'P-CONT,FALSE-VALUE
?CND1:	ZERO?	P-WON /FALSE
	ADD	INTERNAL-MOVES,C-ELAPSED >INTERNAL-MOVES
	FSET?	CHRONOMETER,WORNBIT \?ELS171
	LESS?	DAY,3 \?ELS174
	SET	'MOVES,INTERNAL-MOVES
	JUMP	?CND169
?ELS174:	SET	'MOVES,9947
	JUMP	?CND169
?ELS171:	SET	'MOVES,0
?CND169:	ZERO?	C-ELAPSED /?CND179
	CALL	CLOCKER >V
?CND179:	SET	'POSTPONE-ATTACK,FALSE-VALUE
	SET	'C-ELAPSED,7
	SET	'P-PRSA-WORD,FALSE-VALUE
	SET	'PRSA,FALSE-VALUE
	SET	'PRSO,FALSE-VALUE
	SET	'PRSI,FALSE-VALUE
	RETURN	PRSI


	.FUNCT	DONT-ALL,OBJ1,L
	LOC	OBJ1 >L
	EQUAL?	OBJ1,NOT-HERE-OBJECT \?ELS5
	INC	'P-NOT-HERE
	RTRUE	
?ELS5:	EQUAL?	PRSA,V?TAKE \?ELS7
	ZERO?	PRSI /?ELS7
	IN?	PRSO,PRSI \TRUE
?ELS7:	CALL	ACCESSIBLE?,OBJ1
	ZERO?	STACK /TRUE
	EQUAL?	P-GETFLAGS,P-ALL \FALSE
	ZERO?	PRSI /?ELS18
	EQUAL?	PRSO,PRSI /TRUE
?ELS18:	EQUAL?	PRSA,V?TAKE \?ELS22
	FSET?	OBJ1,TAKEBIT /?ELS27
	FSET?	OBJ1,TRYTAKEBIT \TRUE
?ELS27:	EQUAL?	L,WINNER,HERE,PRSI /?ELS31
	LOC	WINNER
	EQUAL?	L,STACK /?ELS31
	FSET?	L,SURFACEBIT \TRUE
	FSET?	L,TAKEBIT /TRUE
	RFALSE	
?ELS31:	ZERO?	PRSI \FALSE
	CALL	ULTIMATELY-IN?,PRSO
	ZERO?	STACK /FALSE
	RTRUE	
?ELS22:	EQUAL?	PRSA,V?PUT-ON,V?PUT,V?DROP /?THN53
	EQUAL?	PRSA,V?SGIVE,V?GIVE \?ELS50
?THN53:	IN?	OBJ1,WINNER \TRUE
?ELS50:	EQUAL?	PRSA,V?PUT-ON,V?PUT \FALSE
	IN?	PRSO,WINNER /FALSE
	CALL	ULTIMATELY-IN?,PRSO,PRSI
	ZERO?	STACK \TRUE
	RFALSE	


	.FUNCT	CLOCKER-VERB?
	EQUAL?	PROTAGONIST,WINNER \TRUE
	EQUAL?	PRSA,V?SCORE,V?HELP,V?VERSION /FALSE
	EQUAL?	PRSA,V?$COMMAND,V?$UNRECORD,V?$RECORD /FALSE
	EQUAL?	PRSA,V?RESTORE,V?SAVE,V?$RANDOM /FALSE
	EQUAL?	PRSA,V?SCRIPT,V?QUIT,V?RESTART /FALSE
	EQUAL?	PRSA,V?SUPER-BRIEF,V?BRIEF,V?UNSCRIPT /FALSE
	EQUAL?	PRSA,V?VERBOSE \TRUE
	RFALSE	


	.FUNCT	FAKE-ORPHAN,IT-WAS-USED=0,TMP,?TMP1
	CALL	ORPHAN,P-SYNTAX,FALSE-VALUE
	GET	P-OTBL,P-VERBN >TMP
	PRINTI	"[Be specific: Wh"
	ZERO?	IT-WAS-USED /?ELS3
	PRINTI	"at object"
	JUMP	?CND1
?ELS3:	PRINTC	111
?CND1:	PRINTI	" do you want to "
	ZERO?	TMP \?ELS9
	PRINTI	"tell"
	JUMP	?CND7
?ELS9:	GETB	P-VTBL,2
	ZERO?	STACK \?ELS11
	GET	TMP,0
	PRINTB	STACK
	JUMP	?CND7
?ELS11:	GETB	TMP,2 >?TMP1
	GETB	TMP,3
	CALL	WORD-PRINT,?TMP1,STACK
	PUTB	P-VTBL,2,0
?CND7:	SET	'P-OFLAG,TRUE-VALUE
	SET	'P-WON,FALSE-VALUE
	GETB	P-SYNTAX,P-SPREP1
	CALL	PREP-PRINT,STACK
	PRINTR	"?]"


	.FUNCT	PERFORM-PRSA,O=0,I=0
	CALL	PERFORM,PRSA,O,I
	RTRUE	


	.FUNCT	PERFORM,A,O=0,I=0,V,OA,OO,OI
	ZERO?	DEBUG /?CND1
	PRINTI	"[Perform: "
	PRINTN	A
	ZERO?	O /?CND5
	PRINTI	" / PRSO = "
	EQUAL?	A,V?WALK /?ELS11
	PRINTD	O
	JUMP	?CND5
?ELS11:	PRINTN	O
?CND5:	ZERO?	I /?CND14
	PRINTI	" / PRSI = "
	PRINTD	I
?CND14:	PRINTC	93
	CRLF	
?CND1:	SET	'OA,PRSA
	SET	'OO,PRSO
	SET	'OI,PRSI
	SET	'PRSA,A
	ZERO?	P-WALK-DIR \?CND18
	EQUAL?	IT,O,I \?CND18
	CALL	VISIBLE?,P-IT-OBJECT
	ZERO?	STACK /?ELS25
	EQUAL?	IT,O \?ELS28
	SET	'O,P-IT-OBJECT
	JUMP	?CND18
?ELS28:	SET	'I,P-IT-OBJECT
	JUMP	?CND18
?ELS25:	ZERO?	I \?ELS35
	CALL	FAKE-ORPHAN,TRUE-VALUE
	RETURN	8
?ELS35:	CALL	REFERRING
	RETURN	8
?CND18:	ZERO?	P-WALK-DIR \?CND40
	EQUAL?	HIM,O,I \?CND40
	CALL	VISIBLE?,P-HIM-OBJECT
	ZERO?	STACK /?ELS47
	EQUAL?	HIM,O \?ELS50
	SET	'O,P-HIM-OBJECT
	JUMP	?CND40
?ELS50:	SET	'I,P-HIM-OBJECT
	JUMP	?CND40
?ELS47:	ZERO?	I \?ELS57
	CALL	FAKE-ORPHAN
	RETURN	8
?ELS57:	CALL	REFERRING,TRUE-VALUE
	RETURN	8
?CND40:	SET	'PRSO,O
	SET	'PRSI,I
	EQUAL?	A,V?WALK /?ELS64
	EQUAL?	NOT-HERE-OBJECT,PRSO,PRSI \?ELS64
	CALL	D-APPLY,STR?1,NOT-HERE-OBJECT-F >V
	ZERO?	V /?ELS64
	SET	'P-WON,FALSE-VALUE
	JUMP	?CND62
?ELS64:	SET	'O,PRSO
	SET	'I,PRSI
	CALL	THIS-IS-IT,PRSI
	CALL	THIS-IS-IT,PRSO
	GETP	WINNER,P?ACTION
	CALL	D-APPLY,STR?2,STACK >V
	ZERO?	V \?CND62
	GET	PREACTIONS,A
	CALL	D-APPLY,STR?3,STACK >V
	ZERO?	V \?CND62
	ZERO?	I /?ELS75
	GETP	I,P?ACTION
	CALL	D-APPLY,STR?4,STACK >V
	ZERO?	V \?CND62
?ELS75:	ZERO?	O /?ELS79
	EQUAL?	A,V?WALK /?ELS79
	GETP	O,P?ACTION
	CALL	D-APPLY,STR?5,STACK >V
	ZERO?	V \?CND62
?ELS79:	GET	ACTIONS,A
	CALL	D-APPLY,FALSE-VALUE,STACK >V
	ZERO?	V /?CND62
?CND62:	SET	'PRSA,OA
	SET	'PRSO,OO
	SET	'PRSI,OI
	RETURN	V


	.FUNCT	D-APPLY,STR,FCN,FOO=0,RES
	ZERO?	FCN /FALSE
	ZERO?	DEBUG /?CND8
	ZERO?	STR \?ELS14
	PRINTI	"  Default ->"
	CRLF	
	JUMP	?CND8
?ELS14:	PRINTI	"  "
	PRINT	STR
	PRINTI	" -> "
?CND8:	ZERO?	FOO /?ELS21
	CALL	FCN,FOO
	JUMP	?CND17
?ELS21:	CALL	FCN
?CND17:	SET	'RES,STACK
	ZERO?	DEBUG /?CND25
	ZERO?	STR /?CND25
	EQUAL?	RES,M-FATAL \?ELS32
	PRINTI	"Fatal"
	CRLF	
	RETURN	RES
?ELS32:	ZERO?	RES \?ELS34
	PRINTI	"Not handled"
	RETURN	RES
?ELS34:	PRINTI	"Handled"
	CRLF	
?CND25:	RETURN	RES


	.FUNCT	DEQUEUE,RTN
	CALL	QUEUED?,RTN >RTN
	ZERO?	RTN /FALSE
	PUT	RTN,C-RTN,0
	RTRUE	


	.FUNCT	QUEUED?,RTN,C,E
	ADD	C-TABLE,C-TABLELEN >E
	ADD	C-TABLE,C-INTS >C
?PRG1:	EQUAL?	C,E /FALSE
	GET	C,C-RTN
	EQUAL?	STACK,RTN \?CND3
	GET	C,C-TICK
	ZERO?	STACK /FALSE
	RETURN	C
?CND3:	ADD	C,C-INTLEN >C
	JUMP	?PRG1


	.FUNCT	RUNNING?,RTN,C,E
	ADD	C-TABLE,C-TABLELEN >E
	ADD	C-TABLE,C-INTS >C
?PRG1:	EQUAL?	C,E /FALSE
	GET	C,C-RTN
	EQUAL?	STACK,RTN \?CND3
	GET	C,C-TICK
	ZERO?	STACK /FALSE
	GET	C,C-TICK
	GRTR?	STACK,1 \TRUE
	RFALSE	
?CND3:	ADD	C,C-INTLEN >C
	JUMP	?PRG1


	.FUNCT	QUEUE,RTN,TICK,C,E,INT=0
	ADD	C-TABLE,C-TABLELEN >E
	ADD	C-TABLE,C-INTS >C
?PRG1:	EQUAL?	C,E \?ELS5
	ZERO?	INT /?ELS8
	SET	'C,INT
	JUMP	?CND6
?ELS8:	LESS?	C-INTS,C-INTLEN \?CND12
	PRINTI	"Bug2"
	CRLF	
?CND12:	SUB	C-INTS,C-INTLEN >C-INTS
	LESS?	C-INTS,C-MAXINTS \?CND15
	SET	'C-MAXINTS,C-INTS
?CND15:	ADD	C-TABLE,C-INTS >INT
?CND6:	PUT	INT,C-RTN,RTN
	JUMP	?REP2
?ELS5:	GET	C,C-RTN
	EQUAL?	STACK,RTN \?ELS19
	SET	'INT,C
	JUMP	?REP2
?ELS19:	GET	C,C-RTN
	ZERO?	STACK \?CND3
	SET	'INT,C
?CND3:	ADD	C,C-INTLEN >C
	JUMP	?PRG1
?REP2:	GRTR?	INT,CLOCK-HAND \?CND22
	ADD	TICK,3
	SUB	0,STACK >TICK
?CND22:	PUT	INT,C-TICK,TICK
	RETURN	INT


	.FUNCT	CLOCKER,E,TICK,RTN,FLG=0,Q?=0,OWINNER
	ADD	C-TABLE,C-INTS >CLOCK-HAND
	ADD	C-TABLE,C-TABLELEN >E
	SET	'OWINNER,WINNER
	SET	'WINNER,PROTAGONIST
?PRG1:	EQUAL?	CLOCK-HAND,E \?ELS5
	SET	'CLOCK-HAND,E
	SET	'WINNER,OWINNER
	RETURN	FLG
?ELS5:	GET	CLOCK-HAND,C-RTN
	ZERO?	STACK /?CND3
	GET	CLOCK-HAND,C-TICK >TICK
	LESS?	TICK,-1 \?ELS10
	SUB	0,TICK
	SUB	STACK,3
	PUT	CLOCK-HAND,C-TICK,STACK
	SET	'Q?,CLOCK-HAND
	JUMP	?CND3
?ELS10:	ZERO?	TICK /?CND3
	GRTR?	TICK,0 \?CND13
	SUB	TICK,C-ELAPSED >TICK
	LESS?	TICK,0 \?CND16
	SET	'TICK,0
?CND16:	PUT	CLOCK-HAND,C-TICK,TICK
?CND13:	ZERO?	TICK /?CND19
	SET	'Q?,CLOCK-HAND
?CND19:	GRTR?	TICK,0 /?CND3
	GET	CLOCK-HAND,C-RTN >RTN
	ZERO?	TICK \?CND25
	PUT	CLOCK-HAND,C-RTN,0
?CND25:	CALL	RTN
	ZERO?	STACK /?CND28
	SET	'FLG,TRUE-VALUE
?CND28:	ZERO?	Q? \?CND3
	GET	CLOCK-HAND,C-RTN
	ZERO?	STACK /?CND3
	SET	'Q?,TRUE-VALUE
?CND3:	ADD	CLOCK-HAND,C-INTLEN >CLOCK-HAND
	ZERO?	Q? \?PRG1
	ADD	C-INTS,C-INTLEN >C-INTS
	JUMP	?PRG1

	.ENDI
